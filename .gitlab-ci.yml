stages:
  - build
  - compile
  - test
  - deploy
  - notify

composer:
  stage: build
  image: composer:latest
  script:
    - composer install --optimize-autoloader --no-progress --no-scripts --ignore-platform-reqs
  artifacts:
    expire_in: 1 day
    paths:
      - vendor/
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer
    paths:
      - vendor/
  except:
    refs:
      - develop
      - tags

composer:nodev:
  stage: build
  image: composer:latest
  script:
    - composer install --optimize-autoloader --no-progress --no-scripts --ignore-platform-reqs --no-dev
  artifacts:
    expire_in: 1 day
    paths:
      - vendor/
  cache:
    key: ${CI_COMMIT_REF_SLUG}-composer-nodev
    paths:
      - vendor/
  only:
    refs:
      - develop
      - tags

yarn:
  stage: build
  image: node:latest
  script:
    - yarn install
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules/
  cache:
    key: ${CI_COMMIT_REF_SLUG}-yarn
    paths:
      - node_modules/
  only:
    refs:
      - develop
      - tags

yarn:nodev:
  stage: build
  image: node:latest
  script:
    - yarn install --production
  artifacts:
    expire_in: 1 day
    paths:
      - node_modules/
  cache:
    key: ${CI_COMMIT_REF_SLUG}-yarn-nodev
    paths:
      - node_modules/
  only:
    refs:
      - develop
      - tags

resources:nodev:
  stage: compile
  image: node:latest
  dependencies:
    - yarn
    - composer:nodev
  script:
    - yarn production
  artifacts:
    expire_in: 1 day
    paths:
      - public/css/
      - public/fonts/
      - public/images/
      - public/js/
      - public/favicon.ico
      - public/mix-manifest.json
  only:
    refs:
      - develop
      - tags

phpcs:
  stage: test
  image: php:7.4-cli
  dependencies:
    - composer
  script:
    - vendor/bin/phpcs
  except:
    refs:
      - develop
      - tags

phpmd:
  stage: test
  image: php:7.4-cli
  dependencies:
    - composer
  script:
    - vendor/bin/phpmd app,config,database,routes text phpmd.xml
  except:
    refs:
      - develop
      - tags

phpstan:
  stage: test
  image: php:7.4-cli
  dependencies:
    - composer
  before_script:
    - apt update && apt install -y git
    - docker-php-ext-install mysqli pdo pdo_mysql
  script:
    - vendor/bin/phpstan analyse --memory-limit=2G
    - exit $?
  except:
    refs:
      - develop
      - tags

phpunit:
  stage: test
  image: php:7.4-cli
  variables:
    MYSQL_ROOT_PASSWORD: secret
    MYSQL_DATABASE: testing
    MYSQL_USER: testing
    MYSQL_PASSWORD: secret
    DB_HOST: mysql
  services:
    - mysql:8.0
  dependencies:
    - composer
  before_script:
    # Images management libraries are not used in test suites for now and have been disabled.
    # We can re-enable them for feature testing purpose if necessary.
    - apt update && apt install -y git libicu-dev #libfreetype6-dev libjpeg62-turbo-dev libpng-dev libwebp-dev exif
    #- docker-php-ext-configure gd --enable-gd --with-freetype --with-jpeg --with-webp
    - docker-php-ext-install intl pdo_mysql #gd exif default-mysql-client
    - pecl install pcov
    - docker-php-ext-enable pcov
    - mkdir -p coverage/phpunit
    - echo "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_USER'@'%';" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql
    - chown -R www-data:root .
  script:
    - php artisan test --parallel --coverage-text --log-junit=coverage/phpunit/junit.xml
  except:
    refs:
      - develop
      - tags
  artifacts:
    when: always
    paths:
      - coverage/phpunit/junit.xml
    reports:
      junit: coverage/phpunit/junit.xml

.rsync_install: &rsync_install
  before_script:
    - apt update && apt install -y rsync

.ssh_init: &ssh_init |
  which ssh-agent || ( apt update && apt install -y openssh-client )
  eval $(ssh-agent -s)
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
  chmod 600 ~/.ssh/id_rsa
  ssh-add ~/.ssh/id_rsa
  echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config

.permissions_update: &permissions_update |
  find . -type f -not -path "./vendor/*" -exec chmod 664 {} \;
  find . -type d -not -path "./vendor/*" -exec chmod 775 {} \;

.check_returned_http_code: &check_returned_http_code |
  HTTPCODE=$(curl --write-out %{http_code} --silent --output /dev/null $URL)
  echo 'The URL '"$URL"' returned a '"$HTTPCODE"' HTTP code.'
  if [ "$HTTPCODE" -eq 200 ] || [ "$HTTPCODE" -eq 301 ] || [ "$HTTPCODE" -eq 302 ] ; then exit 0; else exit 1; fi

preprod:
  stage: deploy
  image: php:7.4-cli
  variables:
    URL: <project-preprod-url> # ToDo: set project preprod url
  dependencies:
    - composer:nodev
    - yarn:nodev
    - resources:nodev
  <<: *rsync_install
  script:
    - *ssh_init
    - *permissions_update
    - vendor/bin/dep deploy preprod -vv
    - *check_returned_http_code
  environment:
    name: preprod
    url: $URL
  only:
    refs:
      - develop

production:
  stage: deploy
  image: php:7.4-cli
  variables:
    URL: <project-production-url> # ToDo: set project production url
  dependencies:
    - composer:nodev
    - yarn:nodev
    - resources:nodev
  <<: *rsync_install
  script:
    - *ssh_init
    - *permissions_update
    - vendor/bin/dep deploy production -vv
    - *check_returned_http_code
  environment:
    name: production
    url: $URL
  only:
    refs:
      - tags

# ToDo: set a notification hook from this rocket chat example
.notify: &notify |
  apk add --update curl && rm -rf /var/cache/apk/*
  curl https://<rocket-chat-url>/hooks/<rocket-chat-channel-id> \
          -X POST \
          -H 'Content-Type:application/json' \
          -d '{"text":"'"$NOTIFICATION_STATUS_ICON"' `['"$CI_PROJECT_PATH"']` ['"$NOTIFICATION_ACTION"']('"$CI_PIPELINE_URL"') : **'"$CI_PIPELINE_SOURCE"'** from  @'"$GITLAB_USER_NAME"' on **'"$CI_COMMIT_REF_NAME"'**."}'

testing:success:
  stage: notify
  script:
    - *notify
  variables:
    NOTIFICATION_ACTION: "testing"
    NOTIFICATION_STATUS_ICON: "✅"
  except:
    refs:
      - develop
      - tags
  when: on_success

testing:failure:
  stage: notify
  script:
    - *notify
  variables:
    NOTIFICATION_ACTION: "testing"
    NOTIFICATION_STATUS_ICON: "❌"
  except:
    refs:
      - develop
      - tags
  when: on_failure

deploy:success:
  stage: notify
  script:
    - *notify
  variables:
    NOTIFICATION_ACTION: "deployment"
    NOTIFICATION_STATUS_ICON: "✅"
  only:
    refs:
      - develop
      - tags
  when: on_success

deploy:failure:
  stage: notify
  script:
    - *notify
  variables:
    NOTIFICATION_ACTION: "deployment"
    NOTIFICATION_STATUS_ICON: "❌"
  only:
    refs:
      - develop
      - tags
  when: on_failure
